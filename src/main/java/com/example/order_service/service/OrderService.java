package com.example.order_service.service;


import com.example.order_service.client.*;
import com.example.order_service.dto.*;
import com.example.order_service.model.Order;
import com.example.order_service.repository.OrderRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderService {

    private final BillingClient billingClient;
    private final InventoryClient inventoryClient;
    private final DeliveryClient deliveryClient;
    private final NotificationsClient notificationsClient;
    private final OrderRepository orderRepository;

    public OrderResponse createOrder(OrderRequest request) {
        boolean billingDone = false;
        boolean inventoryDone = false;
        boolean deliveryDone = false;

        String status = "DECLINED";
        String message;

        UUID orderId = null;

        try {
            // –®–∞–≥ 1. –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            billingClient.withdraw(request.getUserId(), request.getPrice());
            billingDone = true;
            log.info("‚úÖ –°–ø–∏—Å–∞–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", request.getUserId());

            // –®–∞–≥ 2. –†–µ–∑–µ—Ä–≤ —Ç–æ–≤–∞—Ä–∞
            inventoryClient.reserve(new ProductReserveRequest(
                    request.getProductCode(),
                    1
            ));
            inventoryDone = true;
            log.info("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä '{}'", request.getProductCode());

            // –®–∞–≥ 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞! —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å orderId)
            Order order = Order.builder()
                    .userId(request.getUserId())
                    .price(request.getPrice())
                    .status("PAID")
                    .build();

            Order savedOrder = orderRepository.save(order);
            orderId = savedOrder.getId();

            log.info("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ: {}", orderId);

            // –®–∞–≥ 4. –†–µ–∑–µ—Ä–≤ –∫—É—Ä—å–µ—Ä–∞
            deliveryClient.reserveDelivery(new DeliveryRequest(
                    orderId,
                    "–ö—É—Ä—å–µ—Ä #1",
                    LocalDateTime.now().plusHours(2)
            ));
            deliveryDone = true;
            log.info("‚úÖ –ö—É—Ä—å–µ—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: {}", orderId);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            message = "üéâ –ó–∞–∫–∞–∑ ‚Ññ" + orderId + " —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!";
            status = "PAID";
            sendNotification(request.getUserId(), message);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {}", e.getMessage());

            // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
            if (deliveryDone) {
                try {
                    deliveryClient.cancelDelivery(new DeliveryCancelRequest(orderId));
                    log.info("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {}", orderId);
                } catch (Exception ex) {
                    log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {}", ex.getMessage());
                }
            }

            if (inventoryDone) {
                try {
                    inventoryClient.release(new ProductReleaseRequest(
                            request.getProductCode(), 1
                    ));
                    log.info("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ '{}'", request.getProductCode());
                } catch (Exception ex) {
                    log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {}", ex.getMessage());
                }
            }

            if (billingDone) {
                try {
                    billingClient.refund(request.getUserId(), request.getPrice());
                    log.info("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", request.getUserId());
                } catch (Exception ex) {
                    log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤: {}", ex.getMessage());
                }
            }

            message = "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω: " + e.getMessage();
            sendNotification(request.getUserId(), message);
        }

        return OrderResponse.builder()
                .orderId(orderId)
                .status(status)
                .build();
    }

    private void sendNotification(UUID userId, String message) {
        try {
            notificationsClient.sendNotification(
                    new NotificationRequest(userId, message));
            log.info("üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", userId, message);
        } catch (Exception e) {
            log.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
}